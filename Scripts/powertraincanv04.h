/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 33.1.1 Wed Mar 25 08:51:38 2020.
 */

#ifndef POWERTRAINCANV04_H
#define POWERTRAINCANV04_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define POWERTRAINCANV04_GEARBOX_INFO_FRAME_ID (0x612u)
#define POWERTRAINCANV04_OIL_TANK_INFO_FRAME_ID (0x611u)
#define POWERTRAINCANV04_EMS_INFO2_FRAME_ID (0x610u)
#define POWERTRAINCANV04_BATT48_V_CELL14_PARAM_FRAME_ID (0x733u)
#define POWERTRAINCANV04_BATT48_V_CELL13_PARAM_FRAME_ID (0x732u)
#define POWERTRAINCANV04_BATT48_V_CELL12_PARAM_FRAME_ID (0x731u)
#define POWERTRAINCANV04_BATT48_V_CELL11_PARAM_FRAME_ID (0x730u)
#define POWERTRAINCANV04_BATT48_V_CELL10_PARAM_FRAME_ID (0x72fu)
#define POWERTRAINCANV04_BATT48_V_CELL9_PARAM_FRAME_ID (0x72eu)
#define POWERTRAINCANV04_BATT48_V_CELL8_PARAM_FRAME_ID (0x72du)
#define POWERTRAINCANV04_BATT48_V_CELL7_PARAM_FRAME_ID (0x72cu)
#define POWERTRAINCANV04_BATT48_V_CELL6_PARAM_FRAME_ID (0x72bu)
#define POWERTRAINCANV04_BATT48_V_CELL5_PARAM_FRAME_ID (0x72au)
#define POWERTRAINCANV04_BATT48_V_CELL4_PARAM_FRAME_ID (0x729u)
#define POWERTRAINCANV04_BATT48_V_CELL3_PARAM_FRAME_ID (0x728u)
#define POWERTRAINCANV04_BATT48_V_CELL2_PARAM_FRAME_ID (0x727u)
#define POWERTRAINCANV04_BATT48_V_CELL1_PARAM_FRAME_ID (0x726u)
#define POWERTRAINCANV04_VEHICLE_INFO_FRAME_ID (0x340u)
#define POWERTRAINCANV04_WHEEL_SPEEDS_FRAME_ID (0x341u)
#define POWERTRAINCANV04_ISG_INFO_FRAME_ID (0x320u)
#define POWERTRAINCANV04_EMS_AUX_CMDS_FRAME_ID (0x311u)
#define POWERTRAINCANV04_EMS_INFO1_FRAME_ID (0x310u)
#define POWERTRAINCANV04_BATT48_V_INFO_FRAME_ID (0x511u)
#define POWERTRAINCANV04_BATT12_V_INFO_FRAME_ID (0x510u)
#define POWERTRAINCANV04_PMU_STATUS_FRAME_ID (0x371u)
#define POWERTRAINCANV04_BATT48_V_TEMPS_FRAME_ID (0x734u)
#define POWERTRAINCANV04_BATT_LIMITS_FRAME_ID (0x737u)
#define POWERTRAINCANV04_DCDC48_V_INFO_FRAME_ID (0x736u)
#define POWERTRAINCANV04_DCDC12_V_INFO_FRAME_ID (0x735u)
#define POWERTRAINCANV04_BATT12_V_CELL4_PARAM_FRAME_ID (0x724u)
#define POWERTRAINCANV04_BATT12_V_CELL3_PARAM_FRAME_ID (0x723u)
#define POWERTRAINCANV04_BATT12_V_CELL2_PARAM_FRAME_ID (0x722u)
#define POWERTRAINCANV04_BATT12_V_TEMPS_FRAME_ID (0x725u)
#define POWERTRAINCANV04_BATT12_V_CELL1_PARAM_FRAME_ID (0x721u)

/* Frame lengths in bytes. */
#define POWERTRAINCANV04_GEARBOX_INFO_LENGTH (8u)
#define POWERTRAINCANV04_OIL_TANK_INFO_LENGTH (3u)
#define POWERTRAINCANV04_EMS_INFO2_LENGTH (7u)
#define POWERTRAINCANV04_BATT48_V_CELL14_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL13_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL12_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL11_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL10_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL9_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL8_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL7_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL6_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL5_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL4_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL3_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL2_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_CELL1_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_VEHICLE_INFO_LENGTH (5u)
#define POWERTRAINCANV04_WHEEL_SPEEDS_LENGTH (5u)
#define POWERTRAINCANV04_ISG_INFO_LENGTH (3u)
#define POWERTRAINCANV04_EMS_AUX_CMDS_LENGTH (8u)
#define POWERTRAINCANV04_EMS_INFO1_LENGTH (6u)
#define POWERTRAINCANV04_BATT48_V_INFO_LENGTH (8u)
#define POWERTRAINCANV04_BATT12_V_INFO_LENGTH (8u)
#define POWERTRAINCANV04_PMU_STATUS_LENGTH (4u)
#define POWERTRAINCANV04_BATT48_V_TEMPS_LENGTH (7u)
#define POWERTRAINCANV04_BATT_LIMITS_LENGTH (8u)
#define POWERTRAINCANV04_DCDC48_V_INFO_LENGTH (5u)
#define POWERTRAINCANV04_DCDC12_V_INFO_LENGTH (5u)
#define POWERTRAINCANV04_BATT12_V_CELL4_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT12_V_CELL3_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT12_V_CELL2_PARAM_LENGTH (6u)
#define POWERTRAINCANV04_BATT12_V_TEMPS_LENGTH (7u)
#define POWERTRAINCANV04_BATT12_V_CELL1_PARAM_LENGTH (6u)

/* Extended or standard frame types. */
#define POWERTRAINCANV04_GEARBOX_INFO_IS_EXTENDED (0)
#define POWERTRAINCANV04_OIL_TANK_INFO_IS_EXTENDED (0)
#define POWERTRAINCANV04_EMS_INFO2_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL14_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL13_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL12_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL11_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL10_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL9_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL8_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL7_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL6_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL5_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL4_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL3_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL2_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_CELL1_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_VEHICLE_INFO_IS_EXTENDED (0)
#define POWERTRAINCANV04_WHEEL_SPEEDS_IS_EXTENDED (0)
#define POWERTRAINCANV04_ISG_INFO_IS_EXTENDED (0)
#define POWERTRAINCANV04_EMS_AUX_CMDS_IS_EXTENDED (0)
#define POWERTRAINCANV04_EMS_INFO1_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_INFO_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT12_V_INFO_IS_EXTENDED (0)
#define POWERTRAINCANV04_PMU_STATUS_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT48_V_TEMPS_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT_LIMITS_IS_EXTENDED (0)
#define POWERTRAINCANV04_DCDC48_V_INFO_IS_EXTENDED (0)
#define POWERTRAINCANV04_DCDC12_V_INFO_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT12_V_CELL4_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT12_V_CELL3_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT12_V_CELL2_PARAM_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT12_V_TEMPS_IS_EXTENDED (0)
#define POWERTRAINCANV04_BATT12_V_CELL1_PARAM_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define POWERTRAINCANV04_GEARBOX_INFO_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_OIL_TANK_INFO_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_EMS_INFO2_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL14_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL13_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL12_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL11_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL10_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL9_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL8_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL7_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL6_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL5_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL4_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL3_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL2_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT48_V_CELL1_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_VEHICLE_INFO_CYCLE_TIME_MS (20u)
#define POWERTRAINCANV04_WHEEL_SPEEDS_CYCLE_TIME_MS (20u)
#define POWERTRAINCANV04_ISG_INFO_CYCLE_TIME_MS (10u)
#define POWERTRAINCANV04_EMS_AUX_CMDS_CYCLE_TIME_MS (20u)
#define POWERTRAINCANV04_EMS_INFO1_CYCLE_TIME_MS (10u)
#define POWERTRAINCANV04_BATT48_V_INFO_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT12_V_INFO_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_PMU_STATUS_CYCLE_TIME_MS (50u)
#define POWERTRAINCANV04_BATT48_V_TEMPS_CYCLE_TIME_MS (500u)
#define POWERTRAINCANV04_BATT_LIMITS_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_DCDC48_V_INFO_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_DCDC12_V_INFO_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT12_V_CELL4_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT12_V_CELL3_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT12_V_CELL2_PARAM_CYCLE_TIME_MS (100u)
#define POWERTRAINCANV04_BATT12_V_TEMPS_CYCLE_TIME_MS (500u)
#define POWERTRAINCANV04_BATT12_V_CELL1_PARAM_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define POWERTRAINCANV04_BATT48_V_CELL14_PARAM_BATT48_V_CELL14_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL14_PARAM_BATT48_V_CELL14_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL14_PARAM_BATT48_V_CELL14_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL14_PARAM_BATT48_V_CELL14_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL13_PARAM_BATT48_V_CELL13_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL13_PARAM_BATT48_V_CELL13_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL13_PARAM_BATT48_V_CELL13_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL13_PARAM_BATT48_V_CELL13_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL12_PARAM_BATT48_V_CELL12_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL12_PARAM_BATT48_V_CELL12_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL12_PARAM_BATT48_V_CELL12_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL12_PARAM_BATT48_V_CELL12_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL11_PARAM_BATT48_V_CELL11_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL11_PARAM_BATT48_V_CELL11_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL11_PARAM_BATT48_V_CELL11_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL11_PARAM_BATT48_V_CELL11_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL10_PARAM_BATT48_V_CELL10_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL10_PARAM_BATT48_V_CELL10_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL10_PARAM_BATT48_V_CELL10_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL10_PARAM_BATT48_V_CELL10_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL9_PARAM_BATT48_V_CELL9_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL9_PARAM_BATT48_V_CELL9_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL9_PARAM_BATT48_V_CELL9_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL9_PARAM_BATT48_V_CELL9_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL8_PARAM_BATT48_V_CELL8_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL8_PARAM_BATT48_V_CELL8_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL8_PARAM_BATT48_V_CELL8_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL8_PARAM_BATT48_V_CELL8_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL7_PARAM_BATT48_V_CELL7_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL7_PARAM_BATT48_V_CELL7_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL7_PARAM_BATT48_V_CELL7_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL7_PARAM_BATT48_V_CELL7_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL6_PARAM_BATT48_V_CELL6_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL6_PARAM_BATT48_V_CELL6_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL6_PARAM_BATT48_V_CELL6_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL6_PARAM_BATT48_V_CELL6_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL5_PARAM_BATT48_V_CELL5_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL5_PARAM_BATT48_V_CELL5_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL5_PARAM_BATT48_V_CELL5_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL5_PARAM_BATT48_V_CELL5_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL4_PARAM_BATT48_V_CELL4_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL4_PARAM_BATT48_V_CELL4_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL4_PARAM_BATT48_V_CELL4_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL4_PARAM_BATT48_V_CELL4_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL3_PARAM_BATT48_V_CELL13_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL3_PARAM_BATT48_V_CELL13_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL3_PARAM_BATT48_V_CELL13_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL3_PARAM_BATT48_V_CELL13_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL2_PARAM_BATT48_V_CELL2_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL2_PARAM_BATT48_V_CELL2_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL2_PARAM_BATT48_V_CELL2_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL2_PARAM_BATT48_V_CELL2_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT48_V_CELL1_PARAM_BATT48_V_CELL1_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT48_V_CELL1_PARAM_BATT48_V_CELL1_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT48_V_CELL1_PARAM_BATT48_V_CELL1_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT48_V_CELL1_PARAM_BATT48_V_CELL1_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_VEHICLE_INFO_INERTIA_SWITCH_STATE_INACTIVE_CHOICE (0u)
#define POWERTRAINCANV04_VEHICLE_INFO_INERTIA_SWITCH_STATE_ACTIVE_CHOICE (1u)

#define POWERTRAINCANV04_VEHICLE_INFO_EMERGENCY_SWITCH_STATE_INACTIVE_CHOICE (0u)
#define POWERTRAINCANV04_VEHICLE_INFO_EMERGENCY_SWITCH_STATE_ACTIVE_CHOICE (1u)

#define POWERTRAINCANV04_VEHICLE_INFO_DRIVE_MODE_NORMAL_CHOICE (0u)
#define POWERTRAINCANV04_VEHICLE_INFO_DRIVE_MODE_SPORT_CHOICE (1u)

#define POWERTRAINCANV04_VEHICLE_INFO_ENGINE_STOP_REQUESTED_NO__REQUEST_CHOICE (0u)
#define POWERTRAINCANV04_VEHICLE_INFO_ENGINE_STOP_REQUESTED_ENGINE__STOP__REQUEST_CHOICE (1u)

#define POWERTRAINCANV04_VEHICLE_INFO_PARK_BRAKE_STATE_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_VEHICLE_INFO_PARK_BRAKE_STATE_PARK_BRAKE_ON_CHOICE (1u)
#define POWERTRAINCANV04_VEHICLE_INFO_PARK_BRAKE_STATE_PARK_BRAKE__RELEASED_CHOICE (2u)

#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_POWER_STATE_IGNITION_ON_CHOICE (0u)
#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_POWER_STATE_EXTERNAL_CHARGING_CHOICE (1u)
#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_POWER_STATE_ENGINE_CRANKING_CHOICE (2u)
#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_POWER_STATE_ENGINE_RUNNING_CHOICE (3u)
#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_POWER_STATE_ENGINE_STOP_REQ_CHOICE (4u)
#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_POWER_STATE_FAULT_CHOICE (5u)
#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_POWER_STATE_VEHICLE_SHUTDOWN_CHOICE (6u)
#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_POWER_STATE_EMERGENCY_STOP_CHOICE (7u)

#define POWERTRAINCANV04_VEHICLE_INFO_REVERSE_SWITCH_STATE_REVERSE_NOT__ENGAGED_CHOICE (0u)
#define POWERTRAINCANV04_VEHICLE_INFO_REVERSE_SWITCH_STATE_REVERSE__ENGAGED_CHOICE (1u)

#define POWERTRAINCANV04_VEHICLE_INFO_CRANK_REQUESTED_NO__REQUEST_CHOICE (0u)
#define POWERTRAINCANV04_VEHICLE_INFO_CRANK_REQUESTED_CRANK__REQUESTED_CHOICE (1u)

#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_SHUTDOWN_REQ_NO__REQUEST_CHOICE (0u)
#define POWERTRAINCANV04_VEHICLE_INFO_VEHICLE_SHUTDOWN_REQ_SHUTDOWN__REQUESTED_CHOICE (1u)

#define POWERTRAINCANV04_ISG_INFO_ISG_STATE_OFF_CHOICE (0u)
#define POWERTRAINCANV04_ISG_INFO_ISG_STATE_INIT_CHOICE (1u)
#define POWERTRAINCANV04_ISG_INFO_ISG_STATE_READY_CHOICE (2u)
#define POWERTRAINCANV04_ISG_INFO_ISG_STATE_SPEED_MODE_CHOICE (3u)
#define POWERTRAINCANV04_ISG_INFO_ISG_STATE_VOLTAGE_MODE_CHOICE (4u)
#define POWERTRAINCANV04_ISG_INFO_ISG_STATE_FAULT_CHOICE (5u)

#define POWERTRAINCANV04_EMS_INFO1_ENGINE_STATE_OFF_CHOICE (0u)
#define POWERTRAINCANV04_EMS_INFO1_ENGINE_STATE_READY_CHOICE (1u)
#define POWERTRAINCANV04_EMS_INFO1_ENGINE_STATE_CRANKING_CHOICE (2u)
#define POWERTRAINCANV04_EMS_INFO1_ENGINE_STATE_RUNNING_CHOICE (3u)
#define POWERTRAINCANV04_EMS_INFO1_ENGINE_STATE_STALLED_CHOICE (4u)
#define POWERTRAINCANV04_EMS_INFO1_ENGINE_STATE_SHUTTING_DOWN_CHOICE (5u)
#define POWERTRAINCANV04_EMS_INFO1_ENGINE_STATE_FAULT_CHOICE (6u)

#define POWERTRAINCANV04_EMS_INFO1_CRANK_CMD_NO__CMD_CHOICE (0u)
#define POWERTRAINCANV04_EMS_INFO1_CRANK_CMD_INITIATE__CRANK_CHOICE (1u)

#define POWERTRAINCANV04_PMU_STATUS_PMU_SHUTDOWN_OK_NOT_OK_CHOICE (0u)
#define POWERTRAINCANV04_PMU_STATUS_PMU_SHUTDOWN_OK_SHUTDOWN_OK_CHOICE (1u)

#define POWERTRAINCANV04_PMU_STATUS_PMU_CRANK_INHIBIT_CRANK__ENABLED_CHOICE (0u)
#define POWERTRAINCANV04_PMU_STATUS_PMU_CRANK_INHIBIT_CRANK__INHIBITED_CHOICE (1u)

#define POWERTRAINCANV04_PMU_STATUS_PMU_STATE_OFF_CHOICE (0u)
#define POWERTRAINCANV04_PMU_STATUS_PMU_STATE_ON_CHOICE (1u)
#define POWERTRAINCANV04_PMU_STATUS_PMU_STATE_DISCHARGING_48_V_CHOICE (2u)
#define POWERTRAINCANV04_PMU_STATUS_PMU_STATE_CHARGING_48_V_CHOICE (3u)
#define POWERTRAINCANV04_PMU_STATUS_PMU_STATE_EXT_CHARGING_12_V_CHOICE (4u)
#define POWERTRAINCANV04_PMU_STATUS_PMU_STATE_ON_STATUS_CHECK_CHOICE (5u)
#define POWERTRAINCANV04_PMU_STATUS_PMU_STATE_FAULT_CHOICE (6u)
#define POWERTRAINCANV04_PMU_STATUS_PMU_STATE_NOT_USED_CHOICE (7u)

#define POWERTRAINCANV04_DCDC48_V_INFO_DCDC48_V_SWITCH_REQ_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_DCDC48_V_INFO_DCDC48_V_SWITCH_REQ_OPEN_CHOICE (1u)
#define POWERTRAINCANV04_DCDC48_V_INFO_DCDC48_V_SWITCH_REQ_CLOSED_CHOICE (2u)

#define POWERTRAINCANV04_DCDC48_V_INFO_DCDC48_V_SWITCH_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_DCDC48_V_INFO_DCDC48_V_SWITCH_STATUS_OPEN_CHOICE (1u)
#define POWERTRAINCANV04_DCDC48_V_INFO_DCDC48_V_SWITCH_STATUS_CLOSED_CHOICE (2u)
#define POWERTRAINCANV04_DCDC48_V_INFO_DCDC48_V_SWITCH_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_DCDC48_V_INFO_BATT48_V_CONT_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_DCDC48_V_INFO_BATT48_V_CONT_STATUS_OPEN_CHOICE (1u)
#define POWERTRAINCANV04_DCDC48_V_INFO_BATT48_V_CONT_STATUS_CLOSED_CHOICE (2u)
#define POWERTRAINCANV04_DCDC48_V_INFO_BATT48_V_CONT_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC_STATUS_OFF_CHOICE (1u)
#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC_STATUS_BUCK_CHOICE (2u)
#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC_STATUS_BOOST_CHOICE (3u)
#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC_STATUS_FAULT_CHOICE (4u)

#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC12_V_SWITCH_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC12_V_SWITCH_STATUS_OPEN_CHOICE (1u)
#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC12_V_SWITCH_STATUS_CLOSED_CHOICE (2u)
#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC12_V_SWITCH_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_DCDC12_V_INFO_BATT12_V_CONT_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_DCDC12_V_INFO_BATT12_V_CONT_STATUS_OPEN_CHOICE (1u)
#define POWERTRAINCANV04_DCDC12_V_INFO_BATT12_V_CONT_STATUS_CLOSED_CHOICE (2u)
#define POWERTRAINCANV04_DCDC12_V_INFO_BATT12_V_CONT_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC12_V_SWITCH_REQ_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC12_V_SWITCH_REQ_OPEN_CHOICE (1u)
#define POWERTRAINCANV04_DCDC12_V_INFO_DCDC12_V_SWITCH_REQ_CLOSED_CHOICE (2u)

#define POWERTRAINCANV04_BATT12_V_CELL4_PARAM_BATT12_V_CELL4_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT12_V_CELL4_PARAM_BATT12_V_CELL4_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT12_V_CELL4_PARAM_BATT12_V_CELL4_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT12_V_CELL4_PARAM_BATT12_V_CELL4_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT12_V_CELL3_PARAM_BATT12_V_CELL3_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT12_V_CELL3_PARAM_BATT12_V_CELL3_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT12_V_CELL3_PARAM_BATT12_V_CELL3_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT12_V_CELL3_PARAM_BATT12_V_CELL3_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT12_V_CELL2_PARAM_BATT12_V_CELL2_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT12_V_CELL2_PARAM_BATT12_V_CELL2_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT12_V_CELL2_PARAM_BATT12_V_CELL2_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT12_V_CELL2_PARAM_BATT12_V_CELL2_BAL_STATUS_FAULT_CHOICE (3u)

#define POWERTRAINCANV04_BATT12_V_CELL1_PARAM_BATT12_V_CELL1_BAL_STATUS_UNDEFINED_CHOICE (0u)
#define POWERTRAINCANV04_BATT12_V_CELL1_PARAM_BATT12_V_CELL1_BAL_STATUS_NOT__BALANCING_CHOICE (1u)
#define POWERTRAINCANV04_BATT12_V_CELL1_PARAM_BATT12_V_CELL1_BAL_STATUS_BALANCING_CHOICE (2u)
#define POWERTRAINCANV04_BATT12_V_CELL1_PARAM_BATT12_V_CELL1_BAL_STATUS_FAULT_CHOICE (3u)

/**
 * Signals in message GearboxInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_gearbox_info_t {
    /**
     * Range: 0..255 (-40..215 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t bellhousing_air_temp;

    /**
     * Range: 0..255 (-40..215 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t grbx_oil_temp;

    /**
     * Range: 0..63 (0.7..1.33 bar)
     * Scale: 0.01
     * Offset: 0.7
     */
    uint8_t oil_cooler_in_press;

    /**
     * Range: 0..255 (-40..215 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t oil_cooler_in_temp;

    /**
     * Range: 0..63 (0.7..1.33 bar)
     * Scale: 0.01
     * Offset: 0.7
     */
    uint8_t oil_cooler_out_press;

    /**
     * Range: 0..255 (-40..215 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t oil_cooler_out_temp;

    /**
     * Range: 0..2047 (0..20470 -)
     * Scale: 10
     * Offset: 0
     */
    uint16_t primary_shaft_speed;
};

/**
 * Signals in message OilTankInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_oil_tank_info_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t oil_tank_level;

    /**
     * Range: 0..63 (0.7..1.33 bar)
     * Scale: 0.01
     * Offset: 0.7
     */
    uint8_t oil_tank_press;

    /**
     * Range: 0..255 (-40..215 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t oil_tank_temp;
};

/**
 * Signals in message EMSInfo2.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_ems_info2_t {
    /**
     * Range: 0..255 (0.5..3.05 bar)
     * Scale: 0.01
     * Offset: 0.5
     */
    uint8_t air_in_man_press;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t air_in_man_temp;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eisb2_state;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eisb1_state;

    /**
     * Range: 0..2047 (0..20470 -)
     * Scale: 10
     * Offset: 0
     */
    uint16_t engine_speed;

    /**
     * Range: 0..63 (0.7..1.33 bar)
     * Scale: 0.01
     * Offset: 0.7
     */
    uint8_t fuel_tank_press;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fuel_tank_level;
};

/**
 * Signals in message Batt48VCell14Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell14_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell14_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell14_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell14_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell14_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell14_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell14_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell14_volt;
};

/**
 * Signals in message Batt48VCell13Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell13_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell13_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell13_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell13_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell13_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell13_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell13_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell13_volt;
};

/**
 * Signals in message Batt48VCell12Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell12_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell12_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell12_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell12_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell12_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell12_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell12_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell12_volt;
};

/**
 * Signals in message Batt48VCell11Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell11_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell11_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell11_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell11_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell11_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell11_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell11_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell11_volt;
};

/**
 * Signals in message Batt48VCell10Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell10_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell10_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell10_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell10_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell10_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell10_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell10_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell10_volt;
};

/**
 * Signals in message Batt48VCell9Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell9_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell9_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell9_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell9_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell9_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell9_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell9_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell9_volt;
};

/**
 * Signals in message Batt48VCell8Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell8_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell8_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell8_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell8_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell8_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell8_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell8_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell8_volt;
};

/**
 * Signals in message Batt48VCell7Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell7_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell7_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell7_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell7_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell7_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell7_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell7_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell7_volt;
};

/**
 * Signals in message Batt48VCell6Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell6_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell6_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell6_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell6_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell6_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell6_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell6_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell6_volt;
};

/**
 * Signals in message Batt48VCell5Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell5_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell5_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell5_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell5_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell5_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell5_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell5_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell5_volt;
};

/**
 * Signals in message Batt48VCell4Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell4_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell4_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell4_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell4_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell4_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell4_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell4_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell4_volt;
};

/**
 * Signals in message Batt48VCell3Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell3_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell13_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell13_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell13_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell13_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell13_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell13_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell13_volt;
};

/**
 * Signals in message Batt48VCell2Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell2_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell2_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell2_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell2_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell2_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell2_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell2_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell2_volt;
};

/**
 * Signals in message Batt48VCell1Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_cell1_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_cell1_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt48_v_cell1_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cell1_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt48_v_cell1_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt48_v_cell1_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt48_v_cell1_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt48_v_cell1_volt;
};

/**
 * Signals in message VehicleInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_vehicle_info_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t inertia_switch_state;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t ambient_temp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t emergency_switch_state;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pedal_pos;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_mode;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine_stop_requested;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t park_brake_state;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_power_state;

    /**
     * Range: 0..255 (-40..215 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t coolant_temp;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t reverse_switch_state;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crank_requested;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vehicle_shutdown_req;
};

/**
 * Signals in message WheelSpeeds.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_wheel_speeds_t {
    /**
     * Range: 0..4095 (0..4095 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t wheel_speed_rear_left;

    /**
     * Range: 0..4095 (0..4095 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t wheel_speed_rear_right;

    /**
     * Range: 0..2047 (0..204.7 mph)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vehicle_speed;
};

/**
 * Signals in message ISGInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_isg_info_t {
    /**
     * Range: 0..2047 (-85..119.7 Nm)
     * Scale: 0.1
     * Offset: -85
     */
    uint16_t isg_torque_est;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t isg_state;
};

/**
 * Signals in message EMSAuxCmds.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_ems_aux_cmds_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fuel_pump1_cmd;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fuel_pump2_cmd;
};

/**
 * Signals in message EMSInfo1.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_ems_info1_t {
    /**
     * Range: 0..500 (0..500 Nm/s)
     * Scale: 1
     * Offset: 0
     */
    uint16_t isg_torque_min_slew_rate;

    /**
     * Range: 0..127 (0..127 Nm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t isg_min_torque;

    /**
     * Range: 0..2047 (0..2047 rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t isg_speed_setpoint;

    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine_state;

    /**
     * Range: 0..127 (0..127 Nm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t isg_torque_available;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crank_cmd;

    /**
     * Range: 0..255 (0..255 Nm/s)
     * Scale: 1
     * Offset: 0
     */
    uint8_t isg_torque_max_slew_rate;
};

/**
 * Signals in message Batt48VInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_info_t {
    /**
     * Range: 0..1200 (0..600 A)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t batt48_v_curr_meas;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_avrg;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_max;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_min;

    /**
     * Range: 0..3080 (22.4..53.2 V)
     * Scale: 0.01
     * Offset: 22.4
     */
    uint16_t batt48_v_estimated;

    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt48_v_so_c;
};

/**
 * Signals in message Batt12VInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt12_v_info_t {
    /**
     * Range: 0..1000 (0..200 A)
     * Scale: 0.2
     * Offset: 0
     */
    uint16_t batt12_v_curr_meas;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_avrg;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_max;

    /**
     * Range: 0..880 (6.4..15.2 V)
     * Scale: 0.01
     * Offset: 6.4
     */
    uint16_t batt12_v_estimated;

    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt12_v_so_c;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_min;
};

/**
 * Signals in message PMUStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_pmu_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pmu_shutdown_ok;

    /**
     * Range: 0..100 (40.4..50.4 V)
     * Scale: 0.1
     * Offset: 40.4
     */
    uint8_t isg_volt_setpoint;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pmu_crank_inhibit;

    /**
     * Range: 0..100 (40.4..50.4 V)
     * Scale: 0.1
     * Offset: 40.4
     */
    uint8_t isg_volt_max;

    /**
     * Range: 0..224 (28..50.4 V)
     * Scale: 0.1
     * Offset: 28
     */
    uint8_t isg_volt_min;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pmu_state;
};

/**
 * Signals in message Batt48VTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt48_v_temps_t {
    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_meas1;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_meas2;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_meas3;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_meas4;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_meas5;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_meas6;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt48_v_temp_meas7;
};

/**
 * Signals in message BattLimits.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt_limits_t {
    /**
     * Range: 0..88 (6.4..15.2 V)
     * Scale: 0.1
     * Offset: 6.4
     */
    uint8_t batt12_v_max;

    /**
     * Range: 0..30 (0..30 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt12_v_max_chrg_curr;

    /**
     * Range: 0..150 (0..150 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt12_v_max_dischrg_curr;

    /**
     * Range: 0..88 (6.4..15.2 V)
     * Scale: 0.1
     * Offset: 6.4
     */
    uint8_t batt12_v_min;

    /**
     * Range: 0..50 (0..50 A)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_max_chrg_curr;

    /**
     * Range: 0..600 (0..600 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t batt48_v_max_dischrg_curr;
};

/**
 * Signals in message DCDC48VInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_dcdc48_v_info_t {
    /**
     * Range: 0..900 (0..90 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dcdc48_v_curr_meas;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc48_v_switch_req;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc48_v_switch_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt48_v_cont_status;

    /**
     * Range: 0..3080 (22.4..53.2 V)
     * Scale: 0.01
     * Offset: 22.4
     */
    uint16_t dcdc48_volt_meas;

    /**
     * Range: 0..104 (40..50.4 V)
     * Scale: 0.1
     * Offset: 40
     */
    uint8_t dcdc48_volt_setpoint;
};

/**
 * Signals in message DCDC12VInfo.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_dcdc12_v_info_t {
    /**
     * Range: 0..2000 (0..200 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dcdc12_v_curr_meas;

    /**
     * Range: 0..4 (0..4 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc12_v_switch_status;

    /**
     * Range: 0..880 (6.4..15.2 V)
     * Scale: 0.01
     * Offset: 6.4
     */
    uint16_t dcdc12_volt_meas;

    /**
     * Range: 0..63 (8..14.3 V)
     * Scale: 0.1
     * Offset: 8
     */
    uint8_t dcdc12_volt_setpoint;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt12_v_cont_status;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dcdc12_v_switch_req;
};

/**
 * Signals in message Batt12VCell4Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt12_v_cell4_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt12_v_cell4_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt12_v_cell4_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt12_v_cell4_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt12_v_cell4_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt12_v_cell4_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt12_v_cell4_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt12_v_cell4_volt;
};

/**
 * Signals in message Batt12VCell3Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt12_v_cell3_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt12_v_cell3_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt12_v_cell3_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt12_v_cell3_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt12_v_cell3_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt12_v_cell3_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt12_v_cell3_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt12_v_cell3_volt;
};

/**
 * Signals in message Batt12VCell2Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt12_v_cell2_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt12_v_cell2_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt12_v_cell2_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt12_v_cell2_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt12_v_cell2_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt12_v_cell2_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt12_v_cell2_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt12_v_cell2_volt;
};

/**
 * Signals in message Batt12VTemps.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt12_v_temps_t {
    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_meas1;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_meas2;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_meas3;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_meas4;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_meas5;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_meas6;

    /**
     * Range: 0..125 (-40..85 �C)
     * Scale: 1
     * Offset: -40
     */
    uint8_t batt12_v_temp_meas7;
};

/**
 * Signals in message Batt12VCell1Param.
 *
 * All signal values are as on the CAN bus.
 */
struct powertraincanv04_batt12_v_cell1_param_t {
    /**
     * Range: 0..200 (0..100 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t batt12_v_cell1_so_c;

    /**
     * Range: 0..255 (0..5.1 Ah)
     * Scale: 0.02
     * Offset: 0
     */
    uint8_t batt12_v_cell1_do_d;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t batt12_v_cell1_bal_status;

    /**
     * Range: 0..60 (65..125 %)
     * Scale: 1
     * Offset: 65
     */
    uint8_t batt12_v_cell1_so_h_cap;

    /**
     * Range: 0..60 (90..150 %)
     * Scale: 1
     * Offset: 90
     */
    uint8_t batt12_v_cell1_so_h_res;

    /**
     * Range: 0..120 (0..12 %)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t batt12_v_cell1_imbal;

    /**
     * Range: 0..2000 (1.8..3.8 V)
     * Scale: 0.001
     * Offset: 1.8
     */
    uint16_t batt12_v_cell1_volt;
};

/**
 * Pack message GearboxInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_gearbox_info_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_gearbox_info_t *src_p,
    size_t size);

/**
 * Unpack message GearboxInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_gearbox_info_unpack(
    struct powertraincanv04_gearbox_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_gearbox_info_bellhousing_air_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_gearbox_info_bellhousing_air_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_gearbox_info_bellhousing_air_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_gearbox_info_grbx_oil_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_gearbox_info_grbx_oil_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_gearbox_info_grbx_oil_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_gearbox_info_oil_cooler_in_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_gearbox_info_oil_cooler_in_press_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_gearbox_info_oil_cooler_in_press_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_gearbox_info_oil_cooler_in_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_gearbox_info_oil_cooler_in_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_gearbox_info_oil_cooler_in_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_gearbox_info_oil_cooler_out_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_gearbox_info_oil_cooler_out_press_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_gearbox_info_oil_cooler_out_press_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_gearbox_info_oil_cooler_out_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_gearbox_info_oil_cooler_out_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_gearbox_info_oil_cooler_out_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_gearbox_info_primary_shaft_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_gearbox_info_primary_shaft_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_gearbox_info_primary_shaft_speed_is_in_range(uint16_t value);

/**
 * Pack message OilTankInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_oil_tank_info_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_oil_tank_info_t *src_p,
    size_t size);

/**
 * Unpack message OilTankInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_oil_tank_info_unpack(
    struct powertraincanv04_oil_tank_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_oil_tank_info_oil_tank_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_oil_tank_info_oil_tank_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_oil_tank_info_oil_tank_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_oil_tank_info_oil_tank_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_oil_tank_info_oil_tank_press_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_oil_tank_info_oil_tank_press_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_oil_tank_info_oil_tank_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_oil_tank_info_oil_tank_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_oil_tank_info_oil_tank_temp_is_in_range(uint8_t value);

/**
 * Pack message EMSInfo2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_ems_info2_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_ems_info2_t *src_p,
    size_t size);

/**
 * Unpack message EMSInfo2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_ems_info2_unpack(
    struct powertraincanv04_ems_info2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info2_air_in_man_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info2_air_in_man_press_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info2_air_in_man_press_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info2_air_in_man_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info2_air_in_man_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info2_air_in_man_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info2_eisb2_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info2_eisb2_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info2_eisb2_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info2_eisb1_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info2_eisb1_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info2_eisb1_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_ems_info2_engine_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info2_engine_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info2_engine_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info2_fuel_tank_press_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info2_fuel_tank_press_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info2_fuel_tank_press_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info2_fuel_tank_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info2_fuel_tank_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info2_fuel_tank_level_is_in_range(uint8_t value);

/**
 * Pack message Batt48VCell14Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell14_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell14_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell14Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell14_param_unpack(
    struct powertraincanv04_batt48_v_cell14_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell14_param_batt48_v_cell14_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell13Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell13_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell13_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell13Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell13_param_unpack(
    struct powertraincanv04_batt48_v_cell13_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell13_param_batt48_v_cell13_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell12Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell12_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell12_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell12Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell12_param_unpack(
    struct powertraincanv04_batt48_v_cell12_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell12_param_batt48_v_cell12_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell11Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell11_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell11_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell11Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell11_param_unpack(
    struct powertraincanv04_batt48_v_cell11_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell11_param_batt48_v_cell11_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell10Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell10_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell10_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell10Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell10_param_unpack(
    struct powertraincanv04_batt48_v_cell10_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell10_param_batt48_v_cell10_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell9Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell9_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell9_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell9Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell9_param_unpack(
    struct powertraincanv04_batt48_v_cell9_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell9_param_batt48_v_cell9_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell8Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell8_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell8_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell8Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell8_param_unpack(
    struct powertraincanv04_batt48_v_cell8_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell8_param_batt48_v_cell8_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell7Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell7_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell7_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell7Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell7_param_unpack(
    struct powertraincanv04_batt48_v_cell7_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell7_param_batt48_v_cell7_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell6Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell6_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell6_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell6Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell6_param_unpack(
    struct powertraincanv04_batt48_v_cell6_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell6_param_batt48_v_cell6_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell5Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell5_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell5_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell5Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell5_param_unpack(
    struct powertraincanv04_batt48_v_cell5_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell5_param_batt48_v_cell5_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell4Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell4_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell4_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell4Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell4_param_unpack(
    struct powertraincanv04_batt48_v_cell4_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell4_param_batt48_v_cell4_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell3Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell3_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell3_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell3Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell3_param_unpack(
    struct powertraincanv04_batt48_v_cell3_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell3_param_batt48_v_cell13_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell2Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell2_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell2_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell2Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell2_param_unpack(
    struct powertraincanv04_batt48_v_cell2_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell2_param_batt48_v_cell2_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt48VCell1Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_cell1_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_cell1_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VCell1Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_cell1_param_unpack(
    struct powertraincanv04_batt48_v_cell1_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_cell1_param_batt48_v_cell1_volt_is_in_range(uint16_t value);

/**
 * Pack message VehicleInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_vehicle_info_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_vehicle_info_t *src_p,
    size_t size);

/**
 * Unpack message VehicleInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_vehicle_info_unpack(
    struct powertraincanv04_vehicle_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_inertia_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_inertia_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_inertia_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_ambient_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_ambient_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_ambient_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_emergency_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_emergency_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_emergency_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_brake_pedal_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_brake_pedal_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_brake_pedal_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_drive_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_drive_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_drive_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_engine_stop_requested_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_engine_stop_requested_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_engine_stop_requested_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_park_brake_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_park_brake_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_park_brake_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_vehicle_power_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_vehicle_power_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_vehicle_power_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_coolant_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_coolant_temp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_coolant_temp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_reverse_switch_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_reverse_switch_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_reverse_switch_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_crank_requested_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_crank_requested_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_crank_requested_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_vehicle_info_vehicle_shutdown_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_vehicle_info_vehicle_shutdown_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_vehicle_info_vehicle_shutdown_req_is_in_range(uint8_t value);

/**
 * Pack message WheelSpeeds.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_wheel_speeds_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_wheel_speeds_t *src_p,
    size_t size);

/**
 * Unpack message WheelSpeeds.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_wheel_speeds_unpack(
    struct powertraincanv04_wheel_speeds_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_wheel_speeds_wheel_speed_rear_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_wheel_speeds_wheel_speed_rear_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_wheel_speeds_wheel_speed_rear_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_wheel_speeds_wheel_speed_rear_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_wheel_speeds_wheel_speed_rear_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_wheel_speeds_wheel_speed_rear_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_wheel_speeds_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_wheel_speeds_vehicle_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_wheel_speeds_vehicle_speed_is_in_range(uint16_t value);

/**
 * Pack message ISGInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_isg_info_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_isg_info_t *src_p,
    size_t size);

/**
 * Unpack message ISGInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_isg_info_unpack(
    struct powertraincanv04_isg_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_isg_info_isg_torque_est_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_isg_info_isg_torque_est_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_isg_info_isg_torque_est_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_isg_info_isg_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_isg_info_isg_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_isg_info_isg_state_is_in_range(uint8_t value);

/**
 * Pack message EMSAuxCmds.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_ems_aux_cmds_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_ems_aux_cmds_t *src_p,
    size_t size);

/**
 * Unpack message EMSAuxCmds.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_ems_aux_cmds_unpack(
    struct powertraincanv04_ems_aux_cmds_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_aux_cmds_fuel_pump1_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_aux_cmds_fuel_pump1_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_aux_cmds_fuel_pump1_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_aux_cmds_fuel_pump2_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_aux_cmds_fuel_pump2_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_aux_cmds_fuel_pump2_cmd_is_in_range(uint8_t value);

/**
 * Pack message EMSInfo1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_ems_info1_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_ems_info1_t *src_p,
    size_t size);

/**
 * Unpack message EMSInfo1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_ems_info1_unpack(
    struct powertraincanv04_ems_info1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_ems_info1_isg_torque_min_slew_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info1_isg_torque_min_slew_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info1_isg_torque_min_slew_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info1_isg_min_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info1_isg_min_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info1_isg_min_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_ems_info1_isg_speed_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info1_isg_speed_setpoint_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info1_isg_speed_setpoint_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info1_engine_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info1_engine_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info1_engine_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info1_isg_torque_available_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info1_isg_torque_available_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info1_isg_torque_available_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info1_crank_cmd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info1_crank_cmd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info1_crank_cmd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_ems_info1_isg_torque_max_slew_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_ems_info1_isg_torque_max_slew_rate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_ems_info1_isg_torque_max_slew_rate_is_in_range(uint8_t value);

/**
 * Pack message Batt48VInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_info_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_info_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_info_unpack(
    struct powertraincanv04_batt48_v_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_info_batt48_v_curr_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_info_batt48_v_curr_meas_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_info_batt48_v_curr_meas_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_info_batt48_v_temp_avrg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_info_batt48_v_temp_avrg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_info_batt48_v_temp_avrg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_info_batt48_v_temp_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_info_batt48_v_temp_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_info_batt48_v_temp_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_info_batt48_v_temp_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_info_batt48_v_temp_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_info_batt48_v_temp_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt48_v_info_batt48_v_estimated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_info_batt48_v_estimated_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_info_batt48_v_estimated_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_info_batt48_v_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_info_batt48_v_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_info_batt48_v_so_c_is_in_range(uint8_t value);

/**
 * Pack message Batt12VInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt12_v_info_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt12_v_info_t *src_p,
    size_t size);

/**
 * Unpack message Batt12VInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt12_v_info_unpack(
    struct powertraincanv04_batt12_v_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt12_v_info_batt12_v_curr_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_info_batt12_v_curr_meas_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_info_batt12_v_curr_meas_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_info_batt12_v_temp_avrg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_info_batt12_v_temp_avrg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_info_batt12_v_temp_avrg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_info_batt12_v_temp_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_info_batt12_v_temp_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_info_batt12_v_temp_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt12_v_info_batt12_v_estimated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_info_batt12_v_estimated_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_info_batt12_v_estimated_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_info_batt12_v_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_info_batt12_v_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_info_batt12_v_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_info_batt12_v_temp_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_info_batt12_v_temp_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_info_batt12_v_temp_min_is_in_range(uint8_t value);

/**
 * Pack message PMUStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_pmu_status_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_pmu_status_t *src_p,
    size_t size);

/**
 * Unpack message PMUStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_pmu_status_unpack(
    struct powertraincanv04_pmu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_pmu_status_pmu_shutdown_ok_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_pmu_status_pmu_shutdown_ok_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_pmu_status_pmu_shutdown_ok_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_pmu_status_isg_volt_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_pmu_status_isg_volt_setpoint_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_pmu_status_isg_volt_setpoint_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_pmu_status_pmu_crank_inhibit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_pmu_status_pmu_crank_inhibit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_pmu_status_pmu_crank_inhibit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_pmu_status_isg_volt_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_pmu_status_isg_volt_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_pmu_status_isg_volt_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_pmu_status_isg_volt_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_pmu_status_isg_volt_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_pmu_status_isg_volt_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_pmu_status_pmu_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_pmu_status_pmu_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_pmu_status_pmu_state_is_in_range(uint8_t value);

/**
 * Pack message Batt48VTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt48_v_temps_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt48_v_temps_t *src_p,
    size_t size);

/**
 * Unpack message Batt48VTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt48_v_temps_unpack(
    struct powertraincanv04_batt48_v_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_temps_batt48_v_temp_meas1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_temps_batt48_v_temp_meas1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_temps_batt48_v_temp_meas1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_temps_batt48_v_temp_meas2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_temps_batt48_v_temp_meas2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_temps_batt48_v_temp_meas2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_temps_batt48_v_temp_meas3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_temps_batt48_v_temp_meas3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_temps_batt48_v_temp_meas3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_temps_batt48_v_temp_meas4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_temps_batt48_v_temp_meas4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_temps_batt48_v_temp_meas4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_temps_batt48_v_temp_meas5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_temps_batt48_v_temp_meas5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_temps_batt48_v_temp_meas5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_temps_batt48_v_temp_meas6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_temps_batt48_v_temp_meas6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_temps_batt48_v_temp_meas6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt48_v_temps_batt48_v_temp_meas7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt48_v_temps_batt48_v_temp_meas7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt48_v_temps_batt48_v_temp_meas7_is_in_range(uint8_t value);

/**
 * Pack message BattLimits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt_limits_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt_limits_t *src_p,
    size_t size);

/**
 * Unpack message BattLimits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt_limits_unpack(
    struct powertraincanv04_batt_limits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt_limits_batt12_v_max_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt_limits_batt12_v_max_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt_limits_batt12_v_max_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt_limits_batt12_v_max_chrg_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt_limits_batt12_v_max_chrg_curr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt_limits_batt12_v_max_chrg_curr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt_limits_batt12_v_max_dischrg_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt_limits_batt12_v_max_dischrg_curr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt_limits_batt12_v_max_dischrg_curr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt_limits_batt12_v_min_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt_limits_batt12_v_min_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt_limits_batt12_v_min_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt_limits_batt48_v_max_chrg_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt_limits_batt48_v_max_chrg_curr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt_limits_batt48_v_max_chrg_curr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt_limits_batt48_v_max_dischrg_curr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt_limits_batt48_v_max_dischrg_curr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt_limits_batt48_v_max_dischrg_curr_is_in_range(uint16_t value);

/**
 * Pack message DCDC48VInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_dcdc48_v_info_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_dcdc48_v_info_t *src_p,
    size_t size);

/**
 * Unpack message DCDC48VInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_dcdc48_v_info_unpack(
    struct powertraincanv04_dcdc48_v_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_dcdc48_v_info_dcdc48_v_curr_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc48_v_info_dcdc48_v_curr_meas_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc48_v_info_dcdc48_v_curr_meas_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_dcdc48_v_info_dcdc48_v_switch_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc48_v_info_dcdc48_v_switch_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc48_v_info_dcdc48_v_switch_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_dcdc48_v_info_dcdc48_v_switch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc48_v_info_dcdc48_v_switch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc48_v_info_dcdc48_v_switch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_dcdc48_v_info_batt48_v_cont_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc48_v_info_batt48_v_cont_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc48_v_info_batt48_v_cont_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_dcdc48_v_info_dcdc48_volt_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc48_v_info_dcdc48_volt_meas_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc48_v_info_dcdc48_volt_meas_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_dcdc48_v_info_dcdc48_volt_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc48_v_info_dcdc48_volt_setpoint_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc48_v_info_dcdc48_volt_setpoint_is_in_range(uint8_t value);

/**
 * Pack message DCDC12VInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_dcdc12_v_info_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_dcdc12_v_info_t *src_p,
    size_t size);

/**
 * Unpack message DCDC12VInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_dcdc12_v_info_unpack(
    struct powertraincanv04_dcdc12_v_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_dcdc12_v_info_dcdc12_v_curr_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc12_v_info_dcdc12_v_curr_meas_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc12_v_info_dcdc12_v_curr_meas_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_dcdc12_v_info_dcdc_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc12_v_info_dcdc_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc12_v_info_dcdc_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_dcdc12_v_info_dcdc12_v_switch_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc12_v_info_dcdc12_v_switch_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc12_v_info_dcdc12_v_switch_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_dcdc12_v_info_dcdc12_volt_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc12_v_info_dcdc12_volt_meas_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc12_v_info_dcdc12_volt_meas_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_dcdc12_v_info_dcdc12_volt_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc12_v_info_dcdc12_volt_setpoint_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc12_v_info_dcdc12_volt_setpoint_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_dcdc12_v_info_batt12_v_cont_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc12_v_info_batt12_v_cont_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc12_v_info_batt12_v_cont_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_dcdc12_v_info_dcdc12_v_switch_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_dcdc12_v_info_dcdc12_v_switch_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_dcdc12_v_info_dcdc12_v_switch_req_is_in_range(uint8_t value);

/**
 * Pack message Batt12VCell4Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt12_v_cell4_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt12_v_cell4_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt12VCell4Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt12_v_cell4_param_unpack(
    struct powertraincanv04_batt12_v_cell4_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell4_param_batt12_v_cell4_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt12VCell3Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt12_v_cell3_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt12_v_cell3_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt12VCell3Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt12_v_cell3_param_unpack(
    struct powertraincanv04_batt12_v_cell3_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell3_param_batt12_v_cell3_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt12VCell2Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt12_v_cell2_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt12_v_cell2_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt12VCell2Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt12_v_cell2_param_unpack(
    struct powertraincanv04_batt12_v_cell2_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell2_param_batt12_v_cell2_volt_is_in_range(uint16_t value);

/**
 * Pack message Batt12VTemps.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt12_v_temps_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt12_v_temps_t *src_p,
    size_t size);

/**
 * Unpack message Batt12VTemps.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt12_v_temps_unpack(
    struct powertraincanv04_batt12_v_temps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_temps_batt12_v_temp_meas1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_temps_batt12_v_temp_meas1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_temps_batt12_v_temp_meas1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_temps_batt12_v_temp_meas2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_temps_batt12_v_temp_meas2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_temps_batt12_v_temp_meas2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_temps_batt12_v_temp_meas3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_temps_batt12_v_temp_meas3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_temps_batt12_v_temp_meas3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_temps_batt12_v_temp_meas4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_temps_batt12_v_temp_meas4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_temps_batt12_v_temp_meas4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_temps_batt12_v_temp_meas5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_temps_batt12_v_temp_meas5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_temps_batt12_v_temp_meas5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_temps_batt12_v_temp_meas6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_temps_batt12_v_temp_meas6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_temps_batt12_v_temp_meas6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_temps_batt12_v_temp_meas7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_temps_batt12_v_temp_meas7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_temps_batt12_v_temp_meas7_is_in_range(uint8_t value);

/**
 * Pack message Batt12VCell1Param.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int powertraincanv04_batt12_v_cell1_param_pack(
    uint8_t *dst_p,
    const struct powertraincanv04_batt12_v_cell1_param_t *src_p,
    size_t size);

/**
 * Unpack message Batt12VCell1Param.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int powertraincanv04_batt12_v_cell1_param_unpack(
    struct powertraincanv04_batt12_v_cell1_param_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_so_c_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_do_d_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_do_d_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_do_d_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_bal_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_bal_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_bal_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_so_h_cap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_so_h_cap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_so_h_cap_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_so_h_res_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_so_h_res_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_so_h_res_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_imbal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_imbal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_imbal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_volt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool powertraincanv04_batt12_v_cell1_param_batt12_v_cell1_volt_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
